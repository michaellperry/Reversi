using FacetedWorlds.Reversi.Model;
using UpdateControls;
using FacetedWorlds.Reversi.GameLogic;

namespace FacetedWorlds.Reversi.NavigationModels
{
    public class MainNavigationModel
    {
        private Player _selectedPlayer;
        private string _opponentName;
        private string _messageBody;
        private Square _previewMove;
        private Square _pendingMove;
        private int _pendingMoveIndex;

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private Independent _indPreviewMove = new Independent();
        private Independent _indPendingMoveIndex = new Independent();
        private Independent _indPendingMove = new Independent();
        private Independent _indMessageBody = new Independent();
        private Independent _indSelectedPlayer = new Independent();
        private Independent _indOpponentName = new Independent();

        public Player SelectedPlayer
        {
            get { _indSelectedPlayer.OnGet(); return _selectedPlayer; }
            set { _indSelectedPlayer.OnSet(); _selectedPlayer = value; }
        }

        public string OpponentName
        {
            get { _indOpponentName.OnGet(); return _opponentName; }
            set { _indOpponentName.OnSet(); _opponentName = value; }
        }

        public string MessageBody
        {
            get { _indMessageBody.OnGet(); return _messageBody; }
            set { _indMessageBody.OnSet(); _messageBody = value; }
        }

        public Square PendingMove
        {
            get { _indPendingMove.OnGet(); return _pendingMove; }
            set { _indPendingMove.OnSet(); _pendingMove = value; }
        }

        public int PendingMoveIndex
        {
            get { _indPendingMoveIndex.OnGet(); return _pendingMoveIndex; }
            set { _indPendingMoveIndex.OnSet(); _pendingMoveIndex = value; }
        }

        public Square PreviewMove
        {
            get { _indPreviewMove.OnGet(); return _previewMove; }
            set { _indPreviewMove.OnSet(); _previewMove = value; }
        }
        // End generated code --------------------------------
        #endregion
    }
}
