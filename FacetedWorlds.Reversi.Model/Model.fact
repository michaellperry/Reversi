namespace FacetedWorlds.Reversi.Model;

fact Identity {
	string uri;

	Claim* claims {
		Claim c : c.identity = this
	}
}

fact IdentityService {
	Claim* pendingClaims {
		Claim c : c.identityService = this
			where c.isPending
	}
}

fact Claim {
	publish Identity identity;
	User user;
	publish IdentityService identityService;

	ClaimResponse* responses {
		ClaimResponse r : r.claim = this
	}

	bool isPending {
		not exists ClaimResponse r : r.claim = this
	}
}

fact ClaimResponse {
	Claim claim;
	int approved;
}

fact User {
	string userName;

	Claim* claims {
		Claim c : c.user = this
	}

	Player* activePlayers {
		Player p : p.user = this
			where p.isActive
	}

	Player* finishedPlayers {
		Player p : p.user = this
			where p.isNotActive
	}

	User* relatedUsers {
		Player me : me.user = this
		Player opponent : opponent.game = me.game
		User u : u = opponent.user
	}
}

fact Game {
	unique;

	Player* players {
		Player p : p.game = this
	}

	Message* messages {
		Message m : m.sender.game = this
	}

	Move* moves {
		Move m : m.player.game = this
	}

	Outcome* outcomes {
		Outcome o : o.game = this
	}
}

fact Player {
	publish User user;
	publish Game game;
	int index;

	Move* moves {
		Move m : m.player = this
	}

	Message* newMessages {
		Message m : m.sender = this
			where not m.isAcknowledged
	}

	bool isActive {
		not exists Outcome o : o.game = this.game
	}

	bool isNotActive {
		exists Outcome o : o.game = this.game
	}
}

fact Message {
	Player sender;
	string body;

	bool isAcknowledged {
		exists Acknowledge a : a.message = this
	}
}

fact Acknowledge {
	Message message;
}

fact Move {
	Player player;
	int index;
	int square;
}

fact Outcome {
	Game game;
	Player? winner;
}
