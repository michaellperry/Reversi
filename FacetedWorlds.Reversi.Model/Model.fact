namespace FacetedWorlds.Reversi.Model;

fact Identity {
key:
	string uri;

query:
	Claim* claims {
		Claim c : c.identity = this
	}

	LocalGame* activeLocalGames {
		LocalGame g : g.identity = this
			where g.isActive
	}

	DisableToastNotification* isToastNotificationDisabled {
		DisableToastNotification d : d.identity = this
			where not d.isReenabled
	}
}

fact IdentityService {
key:
query:
	Claim* pendingClaims {
		Claim c : c.identityService = this
			where c.isPending
	}
}

fact Claim {
key:
	publish Identity identity;
	User user;
	publish IdentityService identityService;

query:
	ClaimResponse* responses {
		ClaimResponse r : r.claim = this
	}

	bool isPending {
		not exists ClaimResponse r : r.claim = this
	}
}

fact ClaimResponse {
key:
	publish Claim claim;
	int approved;
}

fact User {
key:
	string userName;

query:
	Claim* claims {
		Claim c : c.user = this
	}

	Player* activePlayers {
		Player p : p.user = this
			where p.isActive
	}

	Player* finishedPlayers {
		Player p : p.user = this
			where p.isNotActive
	}

	User* relatedUsers {
		Player me : me.user = this
		Player opponent : opponent.game = me.game
		User u : u = opponent.user
	}

	ChatEnable* isChatEnabled {
		ChatEnable e : e.user = this
	}

	GameRequest* gameRequests {
		GameRequest r : r.user = this
	}

	GameRequest* pendingGameRequests {
		GameRequest r : r.user = this
			where not r.isCompleted
	}
}

fact ChatEnable {
key:
	User user;
}

fact DisableToastNotification {
key:
	unique;
	Identity identity;

query:
	bool isReenabled {
		exists EnableToastNotification e : e.disable = this
	}
}

fact EnableToastNotification {
key:
	DisableToastNotification disable;
}

fact Game {
key:
	unique;

query:
	Player* players {
		Player p : p.game = this
	}

	Message* messages {
		Message m : m.sender.game = this
	}

	Move* moves {
		Move m : m.player.game = this
	}

	Outcome* outcomes {
		Outcome o : o.game = this
	}
}

fact Player {
key:
	publish User user;
	publish Game game;
	int index;

query:
	Move* moves {
		Move m : m.player = this
	}

	Message* newMessages {
		Message m : m.sender = this
			where not m.isAcknowledged
	}

	bool isActive {
		not exists OutcomeAcknowledge ack : ack.player = this
	}

	bool isNotActive {
		exists OutcomeAcknowledge ack : ack.player = this
	}
}

fact Message {
key:
	Player sender;
	string body;
	int index;

query:
	bool isAcknowledged {
		exists Acknowledge a : a.message = this
	}
}

fact Acknowledge {
key:
	Message message;
}

fact Move {
key:
	Player player;
	int index;
	int square;
}

fact Outcome {
key:
	Game game;
	Player? winner;
	int resigned;
}

fact OutcomeAcknowledge {
key:
	Player player;
	Outcome outcome;
}

fact LocalGame {
key:
	unique;
	Identity identity;

query:
	LocalPlayer* players {
		LocalPlayer p : p.game = this
	}

	LocalMove* moves {
		LocalMove m : m.player.game = this
	}

	LocalOutcome* outcomes {
		LocalOutcome o : o.game = this
	}

	bool isActive {
		not exists LocalOutcomeAcknowledge ack : ack.outcome.game = this
	}
}

fact LocalPlayer {
key:
	LocalGame game;
	int index;
}

fact LocalMove {
key:
	LocalPlayer player;
	int index;
	int square;
}

fact LocalOutcome {
key:
	LocalGame game;
	LocalPlayer? winner;
	int resigned;
}

fact LocalOutcomeAcknowledge {
key:
	LocalOutcome outcome;
}


fact MatchmakingService {
key:
query:
	GameRequest* pendingGameRequests {
		GameRequest r : r.matchmakingService = this
			where not r.isCompleted
	}
}

fact GameRequest {
key:
	unique;
	publish MatchmakingService matchmakingService;
	User user;
	
query:
	bool isCompleted {
		exists GameRequestCompletion c : c.gameRequest = this
	}

	Player* player {
		GameRequestCompletion c : c.gameRequest = this
		Player p : p = c.player
	}
}

fact GameRequestCompletion {
key:
	publish GameRequest gameRequest;
	Player player;
}
